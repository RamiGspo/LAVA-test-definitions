#!/usr/bin/env python3
"""
This script is designed to generate a LAVA Job-file in yaml, which
can be used with our RevPi devices in order to flash and perform tests
with LAVA automatically, thus saving time finding errors in the images.
"""

import argparse
import os
import sys
import yaml
from typing import List

LAVA_REPOSITORY_URL = 'https://gitlab.com/revolutionpi/infrastructure/testing/LAVA-test-definitions.git'

parser = argparse.ArgumentParser(
    description=__doc__,
    epilog="Default behaviour: Generate a LAVA Job to flash and run tests on a given RevPi device.",
)

parser.add_argument(
    "-d",
    "--device-type",
    dest="device_type",
    nargs="?",
    type=str,
    help="Device type to use for testing",
)

parser.add_argument(
    "-u",
    "--url",
    dest="url",
    type=str,
    help="URL of the image to be flashed",
)

parser.add_argument(
    "--flash",
    dest="flash",
    required=True,
    type=str,
    help="Manifest used to flash the given image onto the DUT",
)

parser.add_argument(
    "-s",
    "--testsuite",
    dest="testsuite",
    required=True,
    type=str,
    help="Job testsuite to be used after flashing",
)

parser.add_argument(
    "-t",
    "--tags",
    dest="tags",
    type=str,
    nargs="?",
    const="True",
    help="Tag used for selecting an appropriate device for testing",
)

parser.add_argument(
    "--pkg-url",
    dest="pkg_url",
    action="append",
    help="Package URL to be installed and used for testing",
)

parser.add_argument(
    "-n",
    "--notify",
    dest="notify",
    action="store_true",
    help="Notify upon incomplete job",
)

parser.add_argument(
    "-p",
    "--priority",
    dest="priority",
    type=str,
    choices=["low", "medium", "high"],
    default="medium",
    help="The priority of the job",
)

def validate_flash_file(device_type: str, image_url: str | None, file_flash_contents: dict) -> bool:
    # Check if 'device_type' has been predefined
    if not device_type: 
        if 'device_type' not in file_flash_contents or not file_flash_contents['device_type']:
            print("device_type not found", file=sys.stderr)
            return False

    if not image_url:
        # Check if 'image_url' in 'deploy' exists
        try:
            for action in file_flash_contents['actions']:
                if 'deploy' in action:
                    deploy_data = action['deploy']
                    if 'images' in deploy_data:
                        images_data = deploy_data['images']
                        for image_key, image_value in images_data.items():
                            if 'url' in image_value:
                                image_url = image_value['url']
                                break
                        if image_url:
                            break
        except KeyError:
            image_url = None

        # Validate 'image_url'
        if not image_url:
            print("image not found", file=sys.stderr)
            return False
    return True

def get_image_name_from_url(url: str) -> str:
    # check url-ending
    allowed_extensions = ['.xz', '.zst', '.zip', '.tar.gz']
    url_extension = os.path.splitext(url)[1]
    if url_extension not in allowed_extensions:
        return "image from - " + url
    return os.path.basename(url)


def add_namespace_in_testsuite(content: dict) -> dict:
    actions = content.get("actions", [])

    for action in actions:
        if "test" in action or "boot" in action or "deploy" in action:
            action_name = next(iter(action))
            if "namespace" not in action[action_name]:
                action[action_name]["namespace"] = "testsuite"

    return content

def add_pkg_install(content: dict, pkg_urls: List[str]) -> dict:
    if pkg_urls is not None and len(pkg_urls) > 0:
        pkg_install = {
            'from': 'git',
            'name': 'install-testing-packages',
            'params': {
                'SKIP_INSTALL': 'false',
                'SKIP_REBOOT': 'false',
                'PKG_URLS': " ".join(pkg_urls)
            },
            'path': 'automated/revpi/package/pkg-install.yaml',
            'repository': LAVA_REPOSITORY_URL
        }

        # Find the section with namespace 'preconfiguration' and add custom_test at the beginning of 'definitions'
        for action in content['actions']:
            if action.get('test', {}).get('namespace') == 'preconfiguration':
                action['test']['definitions'].insert(0, pkg_install)
                break

    return content

def create_job(device_type: str, device_tags: str, image_url: str,
               file_flash: str, file_testsuite: str, pkg_urls: List[str],
               notify: bool, priority: str) -> bool:
    # Load the contents of file_flash
    try:
        with open(file_flash, "r") as file:
            file_flash_contents = yaml.safe_load(file)
    except OSError:
        print(f"Could not read file to flash device: {file_flash}", file=sys.stderr)
        return False
    # Load the contents of file_testsuite
    try:
        with open(file_testsuite, "r") as file:
            file_testsuite_contents = yaml.safe_load(file)
    except OSError:
        print(f"Could not read file with testsuite: {file_testsuite}", file=sys.stderr)
        return False

    if not validate_flash_file(device_type, image_url, file_flash_contents):
        return False

    if device_type:
        # Update device_type
        file_flash_contents["device_type"] = device_type

    if not image_url:
        image_url = file_flash_contents["actions"][2]["deploy"]["images"][
            "recovery_image"
        ]["url"]

    file_flash_contents["priority"] = priority

    # Update job_name
    file_flash_contents["job_name"] = "Flash & Test Image: " + get_image_name_from_url(
        image_url
    )

    if device_tags:
        # Update device tags
        file_flash_contents["tags"] = [device_tags]

    if image_url:
        # Update the image URL with the provided image parameter
        file_flash_contents["actions"][2]["deploy"]["images"]["recovery_image"][
            "url"
        ] = image_url

    # Append the actions from "file_testsuite" to the actions in "file_flash"
    file_flash_contents["actions"].extend(file_testsuite_contents["actions"])

    # Add or modify namespace from "file_testsuite"
    file_testsuite_contents = add_namespace_in_testsuite(file_testsuite_contents)

    # Add test to install packages if pkg_urls are provided
    file_flash_contents = add_pkg_install(file_flash_contents, pkg_urls)

    if not notify:
        del file_flash_contents["notify"]

    # Output updated contents to stdout with proper indentation
    formatted_output = yaml.dump(file_flash_contents, default_flow_style=False)
    print(formatted_output)

    return True


def main() -> int:
    args = parser.parse_args()

    device_type = args.device_type
    image_url = args.url
    file_flash = args.flash
    file_testsuite = args.testsuite
    device_tags = args.tags
    pkg_urls = args.pkg_url
    notify = args.notify
    priority = args.priority

    return int(
        not create_job(device_type, device_tags, image_url, file_flash,
                       file_testsuite, pkg_urls, notify, priority)
    )


if __name__ == "__main__":
    sys.exit(main())
